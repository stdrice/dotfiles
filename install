#!/usr/bin/env bash

# pengurice: pznguin-kyun's auto rice script
# by pznguin-kyun <p3nguinkun@proton.me>
# See LICENSE file for copyright and license details.
# To understand everything else, start reading main().

# consts
CRE=$(tput setaf 1)
CYE=$(tput setaf 3)
BLD=$(tput bold)
CNC=$(tput sgr0)

# vars
date=$(date +%Y%m%d-%H%M%S)
git_repo="https://codeberg.org/pznguin-kyun/pengurice"
branch="main"
main_folder="dotfiles"
packages=(bash bibata-cursor-theme-bin blueman bluez bluez-utils brightnessctl btop \
          calcurse cliphist dunst foot galculator gammastep git grim gtk-engine-murrine \
          gvfs gvfs-afc gvfs-mtp gvfs-smb imv libnotify librewolf-bin lxappearance-gtk3 ly \
          mpc mpd mpv ncmpcpp nemo neofetch neovim networkmanager network-manager-applet \
          noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra nwg-displays pamixer \
          papirus-icon-theme pavucontrol pipewire pipewire-pulse polkit-gnome power-profiles-daemon \
          ranger rofi sed slurp sof-firmware sudo swaybg swayfx swayidle swaylock-effects ttf-iosevka-nerd \
          ttf-nerd-fonts-symbols udisks2 unzip waybar wireplumber wl-clipboard xdg-desktop-portal-gtk \
          xdg-desktop-portal-wlr xdg-user-dirs-gtk xorg-drivers xorg-xwayland xsettingsd zathura zathura-pdf-mupdf zip zsh)

# functions
logo() {
	local text="${1:?}"
	# shellcheck disable=SC2183
	printf '%s [%s%s %s%s %s]%s\n\n' "${CRE}" "${CNC}" "${CYE}" "${text}"
}

root_checking(){
if [ ! "$(id -u)" = 0 ]; then
	echo "This script MUST BE run as root."
	exit 1
fi
}

bootstraps(){
    # Allow user to run sudo without password. Since AUR programs must be installed
    # in a fakeroot environment, this is required for all builds with AUR.
    trap 'rm -f /etc/sudoers.d/pengurice-temp'
    echo "%wheel ALL=(ALL) NOPASSWD: ALL
Defaults:%wheel runcwd=*" > /etc/sudoers.d/pengurice-temp
    
    # dbus UUID must be generated for Artix runit.
    dbus-uuidgen >/var/lib/dbus/machine-id
}

intro(){
    logo "Welcome!"
    printf '%s%sWelcome to pengurice!\nThis script will automatically install fully-featured tiling window manager-based system on Linux system.\nMy dotfiles DO NOT modify any of your system configuration.\nYou will be prompted for your root password to install missing dependencies.\nThis script doesnt have potential power to break your system, it only copies files from my repo to your HOME directory. %s\n\n' "${BLD}" "${CRE}" "${CNC}"

    while true; do
	      read -rp "Do you want to continue? [Y/n]: " yn
	      case $yn in
	          [Nn]*) exit ;;
	          *) break ;;
	      esac
    done

    read -rp "First, type your username here: " username
}

update(){
    logo "Updating system"
    rm -rf /var/lib/pacman/db.lck
    case "$(readlink -f /sbin/init)" in
	    *systemd*)
        pacman -Sy --noconfirm --needed archlinux-keyring ;;
      *)
        pacman --noconfirm --needed -Sy artix-keyring artix-archlinux-support ;;
      esac
      pacman -Syyuu --noconfirm
}

setup_before_install(){
    logo "Setup before install"
    pacman -Sy --noconfirm --needed curl git base-devel
    if ! command -v yay &>/dev/null; then
        rm -rf /tmp/aur 
        git clone https://aur.archlinux.org/yay-bin.git /tmp/aur
        chmod 777 /tmp/aur
        cd /tmp/aur
        sudo -u "$username" makepkg -si --noconfirm
        cd
    fi
    case "$(readlink -f /sbin/init)" in
	      *systemd*) return ;;
	      *)
		    logo "Enabling Arch Repositories"
		    grep -q "^\[extra\]" /etc/pacman.conf ||
			  echo -e "[extra]\nInclude = /etc/pacman.d/mirrorlist-arch" >> /etc/pacman.conf
		    pacman -Sy --noconfirm >/dev/null
		    pacman-key --populate archlinux >/dev/null ;;
    esac
}

install_pkgs(){
    logo "Installing packages"
    sudo -u "$username" yay -Sy --noconfirm --needed "${packages[@]}"
}

setup_user(){
    if [ ! "$(id -u "$username" > /dev/null)" ]; then
        echo "$username" "exists"
        usermod -aG wheel,video,audio,input,power,storage,optical,lp,scanner,dbus,uucp "$username"
        [ $(awk -F: -v user="$username" '$1 == user {print $NF}' /etc/passwd) != "/usr/bin/zsh" ] && chsh -s /usr/bin/zsh "$username"
    else
        echo "$username" "does not exist"
        echo "Creating new user"
        useradd -m -g wheel "$username" >/dev/null 2>&1 ||
		usermod -aG wheel,video,audio,input,power,storage,optical,lp,scanner,dbus,uucp -s /usr/bin/zsh "$username" && mkdir -p /home/"$username" && chown "$name":wheel /home/"$name"
        passwd "$username"
    fi
    sudo -u "$username" xdg-user-dirs-update
}

clone_dotfiles(){
    dotfiles_dir="/tmp/dotfiles"
    logo "Downloading dotfiles"
    [ -d $dotfiles_dir ] && rm -rf $dotfiles_dir
    git clone --depth=1 "$git_repo" -b "$branch" "$dotfiles_dir"
}

install_dotfiles(){
    logo "Installing dotfiles.."
    printf "Copying files to respective directories..\n"
    cp -rfT /tmp/dotfiles/"$main_folder"/ /home/"$username"/
    chown -R "$username":"$username" /home/"$username"
    fc-cache -fv
}

config_smth(){
    logo "Configuring pacman (for what???)"
    sed -i "s/^#Color$/Color/" /etc/pacman.conf
    sed -i "s/#NoProgressBar/ILoveCandy/" /etc/pacman.conf
    sed -i "s/#VerbosePkgLists/VerbosePkgLists/" /etc/pacman.conf
    sed -i "s/#ParallelDownloads\ =\ 5/ParallelDownloads\ =\ 5/" /etc/pacman.conf
}

enable_services(){
    logo "Enabling services"
    case "$(readlink -f /sbin/init)" in
        *systemd*)
            systemctl disable display-manager.service
            systemctl enable NetworkManager ly
            systemctl disable NetworkManager-wait-online.service
            sudo -u "$username" systemctl --user enable pipewire.service
            sudo -u "$username" systemctl --user enable pipewire-pulse.service
            sudo -u "$username" systemctl --user enable wireplumber.service
        ;;
        *runit*)
            case "$distro" in
                nyarch) pacman -Sy --needed --noconfirm networkmanager-runit backlight-runit
            esac
            if [ -d /etc/sv ]; then
                ln -s /etc/sv/NetworkManager /var/service/
                ln -s /etc/sv/elogind /var/service/
                ln -s /etc/sv/dbus /var/service/
            elif [ -d /etc/runit/sv ]; then
                ln -s /etc/runit/sv/NetworkManager /run/runit/service/
                ln -s /etc/runit/sv/elogind /run/runit/service/
                ln -s /etc/runit/sv/dbus /run/runit/service/
                ln -s /etc/runit/sv/backlight /run/runit/service/
            fi
        ;;
    esac
}

finalize(){
    # Allow wheel users to sudo with password and allow several system commands
    echo "%wheel ALL=(ALL:ALL) ALL" >/etc/sudoers.d/00-pengurice-wheel-can-sudo
    echo "%wheel ALL=(ALL:ALL) NOPASSWD: /usr/bin/shutdown,/usr/bin/poweroff,/usr/bin/reboot,/usr/bin/systemctl,/usr/bin/loginctl,/usr/bin/mount,/usr/bin/umount,/usr/bin/loadkeys" >/etc/sudoers.d/01-pengurice-cmds-without-password
    rm -rf /etc/sudoers.d/pengurice-temp
}

complete_msg(){
    logo "Done!"
    echo -e "Thanks for using pengurice!\n" "${BLD}" "${CYE}" "${CNC}"
    echo -e "Before restart, you need to remember the following things:\n\n1. If you use Display Manager, choose 'sway' as session/desktop environment and log in.\n2. If you use tty, you need to launch sway manually 'exec sway'.\n"
    while true; do
	    read -rp "Do you want to restart now? [Y/n]: " yn2
	    case $yn2 in
	      [Nn]*) exit ;;
        *) reboot_msg ;;
	    esac
    done
}

reboot_msg(){
    printf "%s%sYour system will be rebooted now %s\n" "${BLD}" "${CYE}" "${CNC}"
    if command -v systemctl &>/dev/null; then
        systemctl reboot
    elif command -v loginctl &>/dev/null; then
        loginctl reboot
    else
        reboot
    fi
}

# main
main(){
    root_checking
    bootstraps
    intro
    update
    setup_before_install
    install_pkgs
    setup_user
    clone_dotfiles
    install_dotfiles
    config_smth
    enable_services
    finalize
    complete_msg
}

main
exit 0
